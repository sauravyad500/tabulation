#include"stdafx.h"
#include<iostream>
#include<vector>
#include<math.h>
using namespace std;

int to_binary (int decimal)
{
	int n = decimal, rem, a = 0, i = 0;
	while ( decimal != 0 )
	{
		rem = decimal % 2;
		decimal /= 2;
		a = a + pow (10, i)*rem;
		i++;
	}
	return a;
}
bool is_powerof2 (int x)
{
	float m = log (x) / log (2);
	if ( floor (m) == m ) return true;
	return false;
}
int count (int decimal)
{
	int  a = 0;
	while ( decimal != 0 )
	{
		if ( decimal % 10 == 1 ) a++;
		decimal /= 10;
	}
	return a;
}

class node
{
	public:
	vector<int> n;
	vector<int> diff;
	int group;
	bool included;
	node () { included = false; }
}temp;
vector<node> minterms, t_minterms, pi;
int no_minterms, column, temp_n = -1;

bool compare (int x, int y)
{
	int rem1, rem2, count = 0;
	if ( x == y ) return false;
	while ( x != 0 || y != 0 )
	{
		rem1 = x % 10;
		rem2 = y % 10;
		x = x / 10, y = y / 10;
		if ( rem1 != rem2 ) count++;
		if ( count == 2 ) return false;
	}
	return true;
}


int main ()
{
	int t,ct;
	char c;
	cout << "Enter the number of minterms";
	cin >> no_minterms;
	for ( int i = 0; i < no_minterms; i++ )
	{
		cin >> t;
		temp.n.push_back (t);
		temp.group = count (t);
		minterms.push_back (temp);
		delete(&temp);
	}
	int group = 0,g1=0,g=0;
	do
	{
		g1 = 0; ct = 0;
		for ( int i = 0; i < no_minterms; i++ )
		{
			for ( int j = 0; j < no_minterms; i++ )
			{
				if ( minterms[j].group == minterms[i].group + 1 )
				{
					int h=0;
					for ( int k = 0; k < pow(2,column); k++ )
					{
						if ( is_powerof2 (minterms[j].n[k] - minterms[i].n[k]))
						{ h++;  }
					}
					if ( h == column )
					{
						ct++;
						for ( int k = 0; k < pow(2, column); k++ )	temp.n.push_back (minterms[i].n[k]);
						/*for ( int k = 0; k < pow (2, column); k++ )	temp.n.push_back (minterms[j].n[k]);

						if ( minterms[i].group > g1 ) { g1 = minterms[i].group; g++; }
						temp.group = g;
						for ( int k = 0; k < pow (2, column) / 2; k++ )
						{
							temp.diff.push_back (minterms[i].diff[k]);
						}
						temp.diff.push_back (log (minterms[j].n[0] - minterms[i].n[0]) / log (2));
						t_minterms.push_back (temp);
						delete(&temp);*/
						cout << "\nHello";
					}
				}
			}
		}
		minterms = t_minterms;
		t_minterms.clear ();
		column++;
	} while ( ct != 0 );




	_sleep (5000);
	return 0;
}

